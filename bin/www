#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('blew:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var app_host = app.get('server_config');

app_host.port = normalizePort(app_host.port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(app_host.port, app_host.ip);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if(error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {

  var bound_host = {
    env: app.get('env') || 'development',
    remote: app.get('remote') || false,
    ip: server.address().address,
    port: server.address().port,
    family: server.address().family,
  };

  console.log('Listening at %s on %s', bound_host.ip, bound_host.port);
  console.log('Site environment: %s', bound_host.env);
  console.log('Remote resource fetching: %s ', bound_host.remote );
}
